# Generated by Django 5.0.14 on 2025-08-17 00:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0005_alter_student_uuid'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='api_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='api_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterModelOptions(
            name='lesson',
            options={},
        ),
        migrations.AlterModelOptions(
            name='question',
            options={},
        ),
        migrations.AlterModelOptions(
            name='quizattempt',
            options={},
        ),
        migrations.AlterModelOptions(
            name='studentprogress',
            options={},
        ),
        migrations.RenameField(
            model_name='student',
            old_name='date_registered',
            new_name='created_at',
        ),
        migrations.RemoveField(
            model_name='lesson',
            name='difficulty_level',
        ),
        migrations.RemoveField(
            model_name='lesson',
            name='lesson_file',
        ),
        migrations.RemoveField(
            model_name='lesson',
            name='prerequisites',
        ),
        migrations.RemoveField(
            model_name='lesson',
            name='subject',
        ),
        migrations.RemoveField(
            model_name='lesson',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='lesson',
            name='version',
        ),
        migrations.RemoveField(
            model_name='question',
            name='ai_generated_feedback',
        ),
        migrations.RemoveField(
            model_name='question',
            name='correct_answer_text',
        ),
        migrations.RemoveField(
            model_name='question',
            name='difficulty_level',
        ),
        migrations.RemoveField(
            model_name='question',
            name='expected_time_seconds',
        ),
        migrations.RemoveField(
            model_name='question',
            name='id',
        ),
        migrations.RemoveField(
            model_name='question',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='ai_feedback_text',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='attempt_timestamp',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='device_id',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='id',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='raw_ai_response',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='score',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='submitted_answer',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='sync_status',
        ),
        migrations.RemoveField(
            model_name='quizattempt',
            name='synced_at',
        ),
        migrations.RemoveField(
            model_name='student',
            name='class_name',
        ),
        migrations.RemoveField(
            model_name='student',
            name='grade_level',
        ),
        migrations.RemoveField(
            model_name='student',
            name='last_device_sync',
        ),
        migrations.RemoveField(
            model_name='student',
            name='school_name',
        ),
        migrations.RemoveField(
            model_name='student',
            name='student_id_code',
        ),
        migrations.RemoveField(
            model_name='student',
            name='uuid',
        ),
        migrations.RemoveField(
            model_name='studentprogress',
            name='id',
        ),
        migrations.RemoveField(
            model_name='studentprogress',
            name='last_updated',
        ),
        migrations.RemoveField(
            model_name='studentprogress',
            name='uuid',
        ),
        migrations.RemoveField(
            model_name='wallet',
            name='address',
        ),
        migrations.RemoveField(
            model_name='wallet',
            name='created_at',
        ),
        migrations.RemoveField(
            model_name='wallet',
            name='id',
        ),
        migrations.RemoveField(
            model_name='wallet',
            name='student',
        ),
        migrations.RemoveField(
            model_name='wallet',
            name='updated_at',
        ),
        migrations.AddField(
            model_name='question',
            name='correct_answer',
            field=models.CharField(default=4, max_length=255),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='question',
            name='difficulty',
            field=models.CharField(choices=[('E', 'Easy'), ('M', 'Medium'), ('H', 'Hard')], default='E', max_length=1),
        ),
        migrations.AddField(
            model_name='quizattempt',
            name='attempted_at',
            field=models.DateTimeField(auto_now_add=True, default='N/A'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='student',
            name='grade',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AddField(
            model_name='student',
            name='parent_email',
            field=models.EmailField(blank=True, max_length=254),
        ),
        migrations.AddField(
            model_name='student',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='studentprogress',
            name='lessons_completed',
            field=models.ManyToManyField(blank=True, related_name='completed_by_students', to='api.lesson'),
        ),
        migrations.AddField(
            model_name='studentprogress',
            name='overall_score',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='wallet',
            name='balance',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
        ),
        migrations.AlterField(
            model_name='lesson',
            name='description',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='lesson',
            name='title',
            field=models.CharField(max_length=200),
        ),
        migrations.AlterField(
            model_name='lesson',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='question',
            name='options',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='question',
            name='question_type',
            field=models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('TF', 'True/False'), ('OQ', 'Open Question')], default='MCQ', max_length=3),
        ),
        migrations.AlterField(
            model_name='question',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='quizattempt',
            name='is_correct',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='quizattempt',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='api.question'),
        ),
        migrations.AlterField(
            model_name='quizattempt',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='student',
            name='gender',
            field=models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='unspecified', max_length=1),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='studentprogress',
            name='overall_progress_data',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name='studentprogress',
            name='student',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.student'),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.user')),
                ('subject', models.CharField(max_length=100)),
                ('institution', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='wallet',
            name='user',
            field=models.OneToOneField(default='N/A', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.user'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='student',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.user'),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('video_file', models.FileField(upload_to='videos/')),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='api.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('cover_image', models.ImageField(upload_to='book_covers/')),
                ('published_date', models.DateTimeField(auto_now_add=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='api.teacher')),
            ],
        ),
        migrations.AddField(
            model_name='lesson',
            name='teacher',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='api.teacher'),
            preserve_default=False,
        ),
    ]
