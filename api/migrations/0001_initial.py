# Generated by Django 5.0.14 on 2025-07-25 18:44

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('subject', models.CharField(blank=True, help_text="e.g., 'Mathematics', 'Science', 'English'", max_length=100, null=True)),
                ('difficulty_level', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Medium', max_length=50)),
                ('prerequisites', models.JSONField(blank=True, help_text='JSON array of prerequisite lesson UUIDs or topic names.', null=True)),
                ('lesson_file', models.FileField(blank=True, help_text='Upload a ZIP file containing lesson content (e.g., JSON, HTML, images).', null=True, upload_to='lessons/')),
                ('version', models.IntegerField(default=1, help_text='Version number for content updates.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['subject', 'title', 'version'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('student_id_code', models.CharField(blank=True, help_text='A unique code for the student, e.g., generated in-app or by teacher.', max_length=50, null=True, unique=True)),
                ('date_registered', models.DateTimeField(auto_now_add=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, null=True)),
                ('grade_level', models.CharField(blank=True, help_text="e.g., 'Primary 5', 'Secondary 2'", max_length=50, null=True)),
                ('class_name', models.CharField(blank=True, help_text="e.g., 'Class A', 'Morning Session'", max_length=100, null=True)),
                ('school_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_device_sync', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('SA', 'Short Answer')], max_length=50)),
                ('options', models.JSONField(blank=True, help_text='JSON array of options for MCQ type questions.', null=True)),
                ('correct_answer_text', models.TextField(blank=True, help_text='For MCQ: exact correct option text. For SA: ideal answer/keywords for AI.', null=True)),
                ('difficulty_level', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Medium', max_length=50)),
                ('expected_time_seconds', models.IntegerField(blank=True, help_text='Estimated time a student should take to answer (in seconds).', null=True)),
                ('ai_generated_feedback', models.TextField(blank=True, help_text='AI-generated general feedback/explanation for the question.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api.lesson')),
            ],
            options={
                'ordering': ['lesson', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('submitted_answer', models.TextField()),
                ('is_correct', models.BooleanField(blank=True, help_text='True if AI/Teacher marked correct, False if incorrect, Null if ungraded.', null=True)),
                ('score', models.FloatField(blank=True, help_text='Score for short answer questions (e.g., 0.0 to 1.0).', null=True)),
                ('ai_feedback_text', models.TextField(blank=True, help_text="Textual feedback from AI (e.g., 'Review algebra basics').", null=True)),
                ('raw_ai_response', models.JSONField(blank=True, help_text='Raw JSON output from the on-device AI model.', null=True)),
                ('attempt_timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp when the attempt was made on the device.')),
                ('synced_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('sync_status', models.CharField(choices=[('PENDING', 'Pending Sync'), ('SYNCED', 'Synced'), ('CONFLICT', 'Conflict')], db_index=True, default='PENDING', max_length=10)),
                ('device_id', models.CharField(blank=True, help_text="Unique identifier for the student's device.", max_length=255, null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to='api.student')),
            ],
            options={
                'ordering': ['-attempt_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('overall_progress_data', models.JSONField(default=dict, help_text='Aggregated progress data per lesson/topic.')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Timestamp when this progress record was last updated on the server.')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='overall_progress', to='api.student')),
            ],
            options={
                'verbose_name_plural': 'Student Progress',
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(help_text='Ethereum wallet address (0x...)', max_length=42, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to='api.student')),
            ],
        ),
    ]
